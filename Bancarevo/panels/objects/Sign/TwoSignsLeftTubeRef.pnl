V 14
3
LANG:10024 0 
LANG:10027 0 
LANG:10001 0 
PANEL,-1 -1 116 296 N "_3DFace" 3
"$BOTTOM_SIGN"
"$SYSTEMNAME"
"$UPPER_SIGN"
E E E E E 1 -1 -1 0  115 119
""0  1
E E 3
"CBRef" "1"
"EClose" E
"dpi" "120"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
2
LANG:10024 0 
LANG:10027 0 
0
LAYER, 1 
2
LANG:10024 0 
LANG:10027 0 
6 18
"RECTANGLE2"
""
1 25 301 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
0
3
LANG:10024 0 
LANG:10027 0 
LANG:10001 0 

4
"sizePolicy" "Preferred Preferred"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"#uses \"log\"
#uses \"SignLibrary\"

main()
{
  int rc;
  string datapoint = $SYSTEMNAME + $BOTTOM_SIGN + \".response.signStatus\";

  if( !dpExists(datapoint))
  {
    Log::error(\"dpExists\", \"Failed to get dp <%s>.\", datapoint);
    return;
  }

  rc = dpConnect(\"setForegroundColor\", datapoint);

  if ( sdGetLastError() < 0 || rc != 0){
    Log::error(\"dpConnect\", \"Failed to connect to dp <%s>.\", datapoint);
    return;
  }
}

void setForegroundColor(string dpSource, int signStatus)
{
    mapping statusCodeMapping = getColorsForStatusCode(dpSource);
    if (mappingHasKey(statusCodeMapping, signStatus)) setValue(\"\", \"color\", statusCodeMapping[signStatus]);
    else setValue(\"\", \"color\", \"\");
}
" 0
 "main()
{
  ChildPanelOnRelativ(\"Sign/ManageWithTwoSigns.pnl\",\"Izbor Znaka\",makeDynString(\"$UPPER_SIGN:\" + $UPPER_SIGN, \"$BOTTOM_SIGN:\" + $BOTTOM_SIGN, \"$SYSTEMNAME:\" + $SYSTEMNAME),50, -90);
}
" 0
 0 1 1 2 1 E -0.1364115095225047 -1.657968050500714e-17 1.726830644375406e-17 -0.1399436465001047 72.41028773806261 312.1230375965315 1 E 25 301 326 592
6 19
"RECTANGLE3"
""
1 25 301 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10024 0 
LANG:10027 0 
LANG:10001 0 

4
"sizePolicy" "Preferred Preferred"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"#uses \"log\"
#uses \"SignLibrary\"

main()
{
  int rc;
  string datapoint = $SYSTEMNAME + $UPPER_SIGN + \".response.signStatus\";

  if( !dpExists(datapoint))
  {
    Log::error(\"dpExists\", \"Failed to get dp <%s>.\", datapoint);
    return;
  }

  rc = dpConnect(\"setForegroundColor\", datapoint);

  if ( sdGetLastError() < 0 || rc != 0){
    Log::error(\"dpConnect\", \"Failed to connect to dp <%s>.\", datapoint);
    return;
  }
}

void setForegroundColor(string dpSource, int signStatus)
{
    mapping statusCodeMapping = getColorsForStatusCode(dpSource);
    if (mappingHasKey(statusCodeMapping, signStatus)) setValue(\"\", \"color\", statusCodeMapping[signStatus]);
    else setValue(\"\", \"color\", \"\");
}
" 0
 "main()
{
  ChildPanelOnRelativ(\"Sign/ManageWithTwoSigns.pnl\",\"Izbor Znaka\",makeDynString(\"$UPPER_SIGN:\" + $UPPER_SIGN, \"$BOTTOM_SIGN:\" + $BOTTOM_SIGN, \"$SYSTEMNAME:\" + $SYSTEMNAME),50, -90);
}
" 0
 0 1 1 2 1 E -0.1364115095225047 -1.657968050500714e-17 1.726830644375406e-17 -0.1399436465001047 72.41028773806261 99.06630371689062 1 E 25 301 326 592
6 16
"Prikazi"
""
1 25 301 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10024 0 
LANG:10027 0 
LANG:10001 0 

4
"sizePolicy" "Preferred Preferred"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"#uses \"log\"
#uses \"basicMethods.ctl\"

main()
{
  int rc;
  string datapoint = $SYSTEMNAME + $UPPER_SIGN + \".command.value\";
  string datapointStatus = $SYSTEMNAME + $UPPER_SIGN + \".response.signStatus\";

  if( !dpExists(datapoint))
  {
	  Log::error(\"dpExists\", \"Failed to get dp <%s>.\", datapoint);
    return;
  }

  rc = dpConnect(\"showSignOnRef\", datapoint, datapointStatus);

  if ( sdGetLastError() < 0 || rc != 0){
    Log::error(\"dpConnect\", \"Failed to connect to dp <%s>.\", datapoint);
    return;
  }
}

void showSignOnRef(string dp, dyn_int values, string dp2, int status)
{
  dyn_int responseValues;
  if(status == 0 || status == 1){
    showSignOnRefCommand(dp, values);
  }
  else {
     string dpe = dpSubStr(dp2, DPSUB_DP);
     if(!getDP($SYSTEMNAME + dpe + \".response.value\", responseValues)) return;
     showSignOnRefResponse(dpe, responseValues);
  }

}

string getPicture(int num){
   return \"RegularSigns/\" + num + \"_270.png\";
}

void showSignOnRefCommand(string dp, dyn_int values){
  if(dynlen(values) == 0)
  {
      Log::error(\"showSignOnRef\", \"Empty array of values <%s>.\", dp);
      setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
      return;
  }

  if(dynlen(values) == 1)
  {
     if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[1]))) == 1){
         setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[1]) + \"]]\");
     }
     else{
        Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
        setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
        return;
     }
  }
  else
  {
    while(true)
     {
      int status;
      for(int i=1;i<=dynlen(values);i++)
      {
          if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[i]))) == 1){
            setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[i]) + \"]]\");
          }
          else{
            Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
            setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
            return;
          }//end else
         delay(1);
      }//end for

      if(!getDP($SYSTEMNAME + $UPPER_SIGN + \".command.value\", values)) return;
      if(!getDP($SYSTEMNAME + $UPPER_SIGN + \".response.signStatus\", status)) return;

      if(status != 0 && status != 1) return;
    }//end while
  }//end else
}

void showSignOnRefResponse(string dp, dyn_int values){
  if(dynlen(values) == 0)
  {
      Log::error(\"showSignOnRef\", \"Empty array of values <%s>.\", dp);
      setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
      return;
  }

  if(dynlen(values) == 1)
  {
     if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[1]))) == 1){
         setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[1]) + \"]]\");
     }
     else{
        Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
        setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
        return;
     }
  }
  else
  {
    while(true)
     {
      int status;
      for(int i=1;i<=dynlen(values);i++)
      {
          if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[i]))) == 1){
            setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[i]) + \"]]\");
          }
          else{
            Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
            setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
            return;
          }//end else
         delay(1);
      }//end for

      if(!getDP($SYSTEMNAME + $UPPER_SIGN + \".response.value\", values)) return;
      if(!getDP($SYSTEMNAME + $UPPER_SIGN + \".response.signStatus\", status)) return;
      if(dynlen(values) < 2 || status == 0 || status == 1) return;
    }//end while
  }//end else
}
" 0
 "main()
{
  ChildPanelOnRelativ(\"Sign/ManageWithTwoSigns.pnl\",\"Izbor Znaka\",makeDynString(\"$UPPER_SIGN:\" + $UPPER_SIGN, \"$BOTTOM_SIGN:\" + $BOTTOM_SIGN, \"$SYSTEMNAME:\" + $SYSTEMNAME),50, -90);
}
" 0
 0 1 1 1 1 E 0.1127879745111923 5.525017278697796e-17 -5.711123097595435e-17 0.116587147852992 28.67577829014882 -15.47469596176707 1 E 25 301 326 592
6 17
"RECTANGLE1"
""
1 25 301 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10024 0 
LANG:10027 0 
LANG:10001 0 

4
"sizePolicy" "Preferred Preferred"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"#uses \"log\"
#uses \"basicMethods.ctl\"

main()
{
  int rc;
  string datapoint = $SYSTEMNAME + $BOTTOM_SIGN + \".command.value\";
  string datapointStatus = $SYSTEMNAME + $BOTTOM_SIGN + \".response.signStatus\";

  if( !dpExists(datapoint))
  {
	  Log::error(\"dpExists\", \"Failed to get dp <%s>.\", datapoint);
    return;
  }

  rc = dpConnect(\"showSignOnRef\", datapoint, datapointStatus);

  if ( sdGetLastError() < 0 || rc != 0){
    Log::error(\"dpConnect\", \"Failed to connect to dp <%s>.\", datapoint);
    return;
  }
}

void showSignOnRef(string dp, dyn_int values, string dp2, int status)
{
  dyn_int responseValues;
  if(status == 0 || status == 1){
    showSignOnRefCommand(dp, values);
  }
  else {
     string dpe = dpSubStr(dp2, DPSUB_DP);
     if(!getDP($SYSTEMNAME + dpe + \".response.value\", responseValues)) return;
     showSignOnRefResponse(dpe, responseValues);
  }

}

string getPicture(int num){
   return \"RegularSigns/\" + num + \"_270.png\";
}

void showSignOnRefCommand(string dp, dyn_int values){
  if(dynlen(values) == 0)
  {
      Log::error(\"showSignOnRef\", \"Empty array of values <%s>.\", dp);
      setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
      return;
  }

  if(dynlen(values) == 1)
  {
     if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[1]))) == 1){
         setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[1]) + \"]]\");
     }
     else{
        Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
        setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
        return;
     }
  }
  else
  {
    while(true)
     {
      int status;
      for(int i=1;i<=dynlen(values);i++)
      {
          if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[i]))) == 1){
            setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[i]) + \"]]\");
          }
          else{
            Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
            setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
            return;
          }//end else
         delay(1);
      }//end for

      if(!getDP($SYSTEMNAME + $BOTTOM_SIGN + \".command.value\", values)) return;
      if(!getDP($SYSTEMNAME + $BOTTOM_SIGN + \".response.signStatus\", status)) return;

      if(status != 0 && status != 1) return;
    }//end while
  }//end else
}

void showSignOnRefResponse(string dp, dyn_int values){
  if(dynlen(values) == 0)
  {
      Log::error(\"showSignOnRef\", \"Empty array of values <%s>.\", dp);
      setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
      return;
  }

  if(dynlen(values) == 1)
  {
     if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[1]))) == 1){
         setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[1]) + \"]]\");
     }
     else{
        Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
        setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
        return;
     }
  }
  else
  {
    while(true)
     {
      int status;
      for(int i=1;i<=dynlen(values);i++)
      {
          if((isfile(PROJ_PATH + \"pictures/\" + getPicture(values[i]))) == 1){
            setValue(\"\", \"fill\", \"[pattern,[fit,png,\" + getPicture(values[i]) + \"]]\");
          }
          else{
            Log::warning(\"showSignOnRef\", \"Failed to load picture!\");
            setValue(\"\", \"fill\", \"[pattern,[fit,png,Other/black.png]]\");
            return;
          }//end else
         delay(1);
      }//end for

      if(!getDP($SYSTEMNAME + $BOTTOM_SIGN + \".response.value\", values)) return;
      if(!getDP($SYSTEMNAME + $BOTTOM_SIGN + \".response.signStatus\", status)) return;

      if(dynlen(values) < 2 || status == 0 || status == 1) return;
    }//end while
  }//end else
}
" 0
 "main()
{
  ChildPanelOnRelativ(\"Sign/ManageWithTwoSigns.pnl\",\"Izbor Znaka\",makeDynString(\"$UPPER_SIGN:\" + $UPPER_SIGN, \"$BOTTOM_SIGN:\" + $BOTTOM_SIGN, \"$SYSTEMNAME:\" + $SYSTEMNAME),50, -90);
}
" 0
 0 1 1 2 1 E 0.1127879745111923 5.525017278697796e-17 -5.711123097595435e-17 0.116587147852992 28.67577829014885 197.5820379178738 1 E 25 301 326 592
0
LAYER, 2 
2
LANG:10024 0 
LANG:10027 0 
0
LAYER, 3 
2
LANG:10024 0 
LANG:10027 0 
0
LAYER, 4 
2
LANG:10024 0 
LANG:10027 0 
0
LAYER, 5 
2
LANG:10024 0 
LANG:10027 0 
0
LAYER, 6 
2
LANG:10024 0 
LANG:10027 0 
0
LAYER, 7 
2
LANG:10024 0 
LANG:10027 0 
0
0
