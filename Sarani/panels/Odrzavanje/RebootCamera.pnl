V 12
1
LANG:10001 0 
PANEL,-1 -1 400 400 N "_3DFace" 1
"$CAM_DP"
E E E E E 1 -1 -1 0  75 75
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:10001 0 
13 0
"PUSH_BUTTON1"
""
1 75 75 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:10001 0 

0
1
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  73 73 212 122

T 
1
LANG:10001 13 Reboot camera
"#uses \"CtrlHTTP\"
#uses \"CtrlXmlRpc\" // xmlrpcEncodeValue is used for base64 encoding, so we need to load this

// General HTTP constants
string HTTP_HOST              = \"Host:\";
string HTTP_PROTOCOL          = \"HTTP/\";
string HTTP_VERSION           = \"1.1\";
string HTTP_COMMAND_GET       = \"GET\";
string HTTP_COMMAND_POST      = \"POST\";
string HTTP_CONTENT_TYPE      = \"Content-Type:\";
string HTTP_CONTENT_LENGTH    = \"Content-Length:\";
string HTTP_CONTENT_ENCODING  = \"Content-Transfer-Encoding:\";
string HTTP_CONNECTION        = \"Connection:\";
string HTTP_CONNECTION_TYPE   = \"Keep-Alive\";
string HTTP_TRANSFER_ENCODING = \"Transfer-Encoding:\";
string HTTP_WWW_AUTHENICATE   = \"WWW-Authenticate:\";
string HTTP_AUTHORIZATION     = \"Authorization:\";
string LINE_TERMINATOR        = \"\\r\\n\";

main()
{
  string cIP;
  //dpGet(\"System1:K1.ip:_original.._value\", cIP); 
  dpGet(sys_name + $CAM_DP + \".ip\", cIP); 
  DebugTN(\"cameraIp: \" + cIP);
/*  string cameraIp = \"10.111.5.28\";
  RebootCamera(cameraIp);
     cameraIp = \"10.111.5.49\";
  RebootCamera(cameraIp);
     cameraIp = \"10.111.5.126\";
  RebootCamera(cameraIp);
  */
  RebootCamera(cIP);
}


RebootCamera(string CameraIp)
{
  int read, open, close, err;  
   string data;    
   unsigned port;

   port=80;
   open=tcpOpen(CameraIp, port);
   DebugTN(\"open: \" + open);    
   httpGet(open, CameraIp, \"/cgi-bin/admin/setparam.cgi?system_reset=0\", \"root\", \"nik\");
  
  close=tcpClose(open); 
  err=getLastError(); 
  DebugTN(\"close: \" + close); 
  DebugTN(\"err:\" +err); 
}


int httpGet(int handle, string host, string uri, string username = \"\", string password = \"\", string authorization = \"Basic\")
{
  // When an username is provided first try it with basic authorization
  if (authorization == \"Basic\" && username != \"\")
  {
    authorization = \"Basic \" + base64encode(username + \":\" + password);
  }
  
  string message = HTTP_COMMAND_GET   + \" \" + uri + \" \" + HTTP_PROTOCOL + HTTP_VERSION + LINE_TERMINATOR +                   
                   HTTP_HOST           + \" \" + host + LINE_TERMINATOR +                   
                   (authorization == \"\" ? \"\" : HTTP_AUTHORIZATION + \" \" + authorization + LINE_TERMINATOR) +
                   //\"Authorization: Basic cm9vdDpuaWs=\" + LINE_TERMINATOR +   //username = root, pass= nik
                   HTTP_CONNECTION     + \" \" + HTTP_CONNECTION_TYPE + LINE_TERMINATOR +                    
                   LINE_TERMINATOR;//+

  int bytesSent = tcpWrite(handle, message);

  dyn_errClass errors = getLastError();

  if (dynlen(errors) > 0)
  {
    throwError(makeError(\"\", PRIO_WARNING, ERR_SYSTEM, 54, \"httpGet(\" + handle + \", \" + host + \", \" + uri + \", ...) error during tcpWrite\", bytesSent, 
                         HTTP_COMMAND_GET + \" \" + uri + \" \" + HTTP_PROTOCOL + HTTP_VERSION));
    throwError(errors);  
      
    return -1;
  }

  return bytesSent;
}


string base64encode(string text, bool utf8 = false)
{
  blob input;
  string result;
  
  blobAppendValue(input, text, strlen(text));
  
  int rc = xmlrpcEncodeValue(input, result, utf8);
  
  // Remove leading '<value><base64>' part
  result = substr(result, strlen(\"<value><base64>\"));
  
  // And trailing '</base64></value>' part
  result = substr(result, 0, strlen(result) - strlen(\"</base64></value>\"));
  
  DebugFTN(\"BASE64\", \"base64encode(\" + text + \", \" + utf8 + \") input: \" + input + \" rc: \" + rc + \" result: \" + result);
  
  return result;
}" 0
 E E E
0
LAYER, 1 
1
LANG:10001 0 
0
LAYER, 2 
1
LANG:10001 0 
0
LAYER, 3 
1
LANG:10001 0 
0
LAYER, 4 
1
LANG:10001 0 
0
LAYER, 5 
1
LANG:10001 0 
0
LAYER, 6 
1
LANG:10001 0 
0
LAYER, 7 
1
LANG:10001 0 
0
0
