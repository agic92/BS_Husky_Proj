V 13
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 908 400 N "_3DFace" 2
"$OBJECT"
"$SLIDERNAME"
E E E E E 1 -1 -1 0  11 47
"VIDEO_OA/VIDEO_OA_refPanel_display_slider.pnl"0  1
E E 3
"CBRef" "1"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
25 0
"tab_time"
""
1 20 20 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"draggable" ""
"DragStart" "main(int keys, int row, string column)
{
  dyn_int selectedLines = this.getSelectedLines();
  dyn_int t_from;
  dyn_int t_to; 
  dyn_string reason;
  string information; 

  for(int i = 1; i <= dynlen(selectedLines); i++)
  {
    dyn_anytype param = this.getLineN(selectedLines[i]);
    t_from[i] = param[5];
    t_to[i] =  param[6]; 
    reason[i] =  param[7]; 
  }
  
  information = \"newTimeline;\" + dynMin(t_from) + \";\" + dynMax(t_to)+ \";\" + t_from + \";\" + t_to + \";\" + reason;
  //DebugN(\"newTimeline\", information);
  dragStart(information, \"clock.png\");
}"
3
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  18 18 500 201
"dyn_string actualPlaybackCams;

main()    
{
  string display = $OBJECT;
   
  this.deleteAllLines();
  this.selectByClick(TABLE_SELECT_LINE);
  this.tableMode(TABLE_SELECT_MULTIPLE );
  VIDEO_OA_alternatingRowColorsForTable();
  this.sortOnClick(0);
  
  // connect to disply monitor feedback
  dpConnect(\"VIDEO_OA_objExpDisplayShowState\", display + \".object.device.state\");
                                              
}

VIDEO_OA_objExpDisplayShowState(string dp, string sState)
{
  dyn_string displayItems;
  int dialogcount = VIDEO_OA_filterKeywordValue(sState, \"dialogcount\");
  string state    = VIDEO_OA_filterKeywordValue(sState, \"state\");
  dyn_string source = strsplit(VIDEO_OA_filterKeywordValue(sState, \"source\"), \",\");

  VIDEO_OA_displayControl_showPlaybackSources(source, dialogcount, state);  
}


//0  -> ID
//1  -> speed
//2  -> audiomute
//3  -> begin (NTP-Timestamp)
//4  -> end (NTP-Timestamp)
//5  -> pint (play breaks)
//6  -> autostop
//7  -> pos
//8  -> streaming status: streaming, pending, stopped, paused
//9  -> dialogInd
//10 -> mode: live, sequence, playback

// Only if mode == sequence
//11 -> sequenceId
//12 -> sequenceStep

VIDEO_OA_displayControl_showPlaybackSources(dyn_string source, int dialogcount, string state)
{
  
  dyn_string updateActualPlaybackCams; // all actusl plyback cams on this display monitor

  for(int i = 1; i <= dynlen(source); i++)
  {
    dyn_string actSource = strsplit( source[i] , \" \");
    if(dynlen(actSource) >= 11) // data set ok
    {  
      string mode = actSource[11];
      
      if (mode == \"playback\")
      {
        dynAppend(updateActualPlaybackCams,  actSource[1] + \".object.command.response\");
      }     
    }
  }
  dynUnique(updateActualPlaybackCams);
  
  if (actualPlaybackCams != updateActualPlaybackCams) // changes detected
  {
    
    if (dynlen(actualPlaybackCams) > 0) // disconnect all actual cams
    {
      for(int i = 1; i <= dynlen(actualPlaybackCams); i++)
      {
       dpDisconnect( \"VIDEO_OA_displayControl_showPlaybackTimes\", actualPlaybackCams[i]);
       this.deleteLines(1 ,\"#1\", makeDynString(dpSubStr(actualPlaybackCams[i], DPSUB_SYS_DP))); // maybe delete line in table
     }
    }
    
    actualPlaybackCams = updateActualPlaybackCams; // update List ist now teh actaul list
    
    if (dynlen(actualPlaybackCams) > 0) // connect actual lis
    {
      dyn_string request_1;
      dyn_string request_2;
      
      for(int i = 1; i <= dynlen(actualPlaybackCams); i++)
       dpConnect( \"VIDEO_OA_displayControl_showPlaybackTimes\", actualPlaybackCams[i]);
      
      for( int i = 1; i <= dynlen(actualPlaybackCams); i++)
      {
        strreplace(updateActualPlaybackCams[i], \".object.command.response\", \".object.command.request\");
        request_1[i] = \"cmd=getstreamprotectionlist\";
        request_2[i] = \"cmd=getstreamtimeline\";
      }
      
      
      dpSet(updateActualPlaybackCams, request_1);

      delay(0,100);
      
      dpSet(updateActualPlaybackCams, request_2);

      
    } 
    else
       this.deleteAllLines(); // no playback -> delete all
  }
}   



VIDEO_OA_displayControl_showPlaybackTimes(string dp, string response)
{
  string timeline = VIDEO_OA_filterKeywordValue(response, \"periods\");
  string cmd = VIDEO_OA_filterKeywordValue(response, \"cmd\"); 

  this.deleteLines(2 ,\"#1\", makeDynString(dpSubStr(dp, DPSUB_SYS_DP)), \"#6\",makeDynString(cmd)); // delete lines for this Cam
  
  dyn_string timeParts = strsplit(timeline, \",\");
  
  dyn_dyn_mixed result;

  for(int i = 1; i <= dynlen(timeParts); i++)
  {
    dyn_float times = strsplit(timeParts[i], \":\");
    result[i][1] = dpSubStr(dp, DPSUB_SYS_DP);
    result[i][2] = VIDEO_OA_makeLokalTime((time) times[1]);
    result[i][3] = VIDEO_OA_makeLokalTime((time) times[2]);
    
    string number;
    sprintf(number, \"%05d\", VIDEO_OA_getObjectNumber(result[i][1]) ); 
    
    result[i][4] = \"(\" + number + \") \" + dpGetComment(result[i][1]+\".\");
        
  }
    
    
  for(int i = 1; i <= dynlen(result); i++)
  {
    string t_from = formatTime(\"%c\",(time) result[i][2] );
    string t_to  = formatTime(\"%c\", (time) result[i][3] );
    
    
    this.appendLine(\"#7\",result[i][4] ,\"#1\", result[i][1], \"#2\", t_from, \"#3\", t_to, \"#4\", result[i][2], \"#5\", result[i][3],\"#6\", cmd);
    if(cmd == \"getstreamtimeline\")
    {
      this.cellBackColRC( this.lineCount() - 1, \"#1\", \"Video_videoNormal\");
      this.cellBackColRC( this.lineCount() - 1, \"#2\", \"Video_videoNormal\");
      this.cellBackColRC( this.lineCount() - 1, \"#3\", \"Video_videoNormal\");
      this.cellBackColRC( this.lineCount() - 1, \"#7\", \"Video_videoNormal\");
    }
    else
    {
     this.cellBackColRC( this.lineCount() - 1, \"#1\", \"Video_videoAlarm\");
     this.cellBackColRC( this.lineCount() - 1, \"#2\", \"Video_videoAlarm\");
     this.cellBackColRC( this.lineCount() - 1, \"#3\", \"Video_videoAlarm\");
     this.cellBackColRC( this.lineCount() - 1, \"#7\", \"Video_videoAlarm\");
    }
  }  
    
  this.sort(\"#4\");
  
  dyn_int t_from;
  dyn_int t_to;
  int t_start;
  int t_end;
  string sliderName = $SLIDERNAME;
  
  dyn_string reason;   
  int count;
  string dropZoneForeCol;
    
  getValue(\"\", \"lineCount\", count);
   
  for(int i = 0; i <= (count - 1); i++)
  {
    dyn_anytype param;
    getValue (\"\", \"getLineN\", i, param);

    t_from[i + 1] = param[5];
    t_to[i + 1] =  param[6]; 
    reason[i + 1] =  param[7]; 
  
  }
  
  getValue(sliderName + \".dropZone\", \"foreCol\", dropZoneForeCol);
  
  if(dropZoneForeCol == \"Video_timeline_dropped\") // drop zone was used -> get min and max directly from slider
  {
    getMultiValue(sliderName + \".slider\", \"minimum\", t_start,
                  sliderName + \".slider\", \"maximum\", t_end); 
  }
  else
  {
    t_start = dynMin(t_from);
    t_end = dynMax(t_to);
    //VIDEO_OA_pbSliderSetLimits( sliderName, t_start, t_end);
  }


  VIDEO_OA_pbUpdateTimelines(t_start, t_end, t_from, t_to, reason, sliderName);  
  
  
  
}


time VIDEO_OA_makeLokalTime(time utcTime)
{
  string utcString = formatTime(\"%Y.%m.%d %H:%M:%S\", utcTime, \".%03d\");
  
  time localTime = scanTimeUTC(utcString);
  
  return localTime;
}


" 0
E 1 0 1 7 0 "#7" 17 1 0 "s" 3
LANG:10000 6 Kamera
LANG:10001 6 Camera
LANG:10027 6 Camera
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

200 "#1" 17 0 0 "s" 3
LANG:10000 6 Kamera
LANG:10001 6 Camera
LANG:10027 6 Camera
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

200 "#2" 11 1 0 "s" 3
LANG:10000 3 von
LANG:10001 4 from
LANG:10027 4 from
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

130 "#3" 11 1 0 "s" 3
LANG:10000 3 bis
LANG:10001 2 to
LANG:10027 2 to
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

130 "#4" 8 0 0 "s" 3
LANG:10000 2 #4
LANG:10001 2 #4
LANG:10027 2 #4
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

100 "#5" 8 0 0 "s" 3
LANG:10000 2 #5
LANG:10001 2 #5
LANG:10027 2 #5
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

100 "#6" 0 0 0 "s" 3
LANG:10000 2 #6
LANG:10001 2 #6
LANG:10027 2 #6
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0 
20 20 10 0
3
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 0 2 0 1 7
1 0
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
0
